openapi: 3.0.1
info:
  title: MangaDB Swagger
  description: |
    MangaDB allows you to easily keep track of the mangas you are reading,
    want to read, and have already finished reading.

    If you have any questions or want to contribute then [![Gitter](https://badges.gitter.im/Rafase282/Mangadb.svg)](https://gitter.im/Rafase282/Mangadb?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)

    To create an admin account, you must specify it as a comma separated list on the `.env` file.
  termsOfService: http://helloreverb.com/terms/
  contact:
    name: rafase282@gmail.com
  license:
    name: MIT
    url: https://github.com/Rafase282/Mangadb/blob/master/LICENSE
  version: 2.5.0
servers:
- url: https://mangadbv2.herokuapp.com/api/v2
security:
- api_key: []
paths:
  /:
    get:
      tags:
      - Index
      summary: Displays a welcome message.
      description: This route does notrequires a JWT. The usesr will get a message
        pointing to the documentation as there is nothign to do here.
      operationId: getWelcome
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
  /api/v2:
    get:
      tags:
      - Index
      summary: Displays a welcome message.
      description: This route does notrequires a JWT. The usesr will get the swagger
        documentation.
      operationId: getAPI
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
  /auth:
    post:
      tags:
      - Authentication
      summary: Authenticates existing users for using the API for one hour.
      description: This route does notrequires a JWT, but instead provides one for
        the user that expires in one hour. The response provides the JWT along with
        some useful information.
      operationId: getToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - password
              - username
              properties:
                username:
                  type: string
                  description: Target username.
                password:
                  type: string
                  description: User's password.
                  format: password
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /reset:
    post:
      tags:
      - Authentication
      summary: Authenticates users for using the API for 5 minutes for password reset
        purposes..
      description: This route does not requires a JWT, but instead provides one  for
        the user that expires in five minutes. The  response provides the  JWT along
        with some useful information. This is used to get temporary access to change
        a password. The token will be sent via email and not returned on the payload.
      operationId: getResetToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - email
              properties:
                email:
                  type: string
                  description: Target email.
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mangas:
    get:
      tags:
      - Mangas
      - Administrators
      summary: Gets a list of all mangas on the database.
      description: The admin uses this route to get a list of all the mangas and their
        data regardless of the user. Good for checking when you don't have access
        to the databse directly.
      operationId: getAllMangas
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mangas'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
    delete:
      tags:
      - Mangas
      - Administrators
      summary: Deletes all mangas.
      description: This deletes all the mangas for all the users, except the admin.
      operationId: delMangas
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
  /mangas/{username}:
    get:
      tags:
      - Mangas
      summary: Returns a list of all the mangas the user has.
      description: Users can only view their own content. However, the admin can also
        view it.
      operationId: getMangas
      parameters:
      - name: username
        in: path
        description: Target username.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mangas'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
    post:
      tags:
      - Mangas
      summary: Creates new manga.
      description: The manga title should be unique. Please see the `Manga Schema`.
      operationId: postManga
      parameters:
      - name: username
        in: path
        description: Target username.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - altName
              - author
              - categories
              - chapter
              - direction
              - plot
              - seriesStatus
              - thumbnail
              - title
              - type
              - url
              - userStatus
              properties:
                title:
                  type: string
                  description: Manga's title.
                author:
                  type: string
                  description: Manga's author.
                url:
                  type: string
                  description: URL to read manga online.
                userStatus:
                  type: string
                  description: Whether the user is currently reading or not.
                type:
                  type: string
                  description: The type of manga.
                categories:
                  type: string
                  description: Categories for the manga.
                chapter:
                  type: integer
                  description: Last chapter read.
                  format: int32
                seriesStatus:
                  type: string
                  description: Whether the series is ongoing or not.
                plot:
                  type: string
                  description: Manga's plot.
                altName:
                  type: string
                  description: Alternate names for the manga.
                direction:
                  type: string
                  description: The reading direction of the manga.
                thumbnail:
                  type: string
                  description: Direct url to a thumbnail of the manga.
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manga'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
    delete:
      tags:
      - Mangas
      summary: Deletes all mangas from target user
      description: Route for users to delete their their mangas all at once or for
        the admin to do it.
      operationId: delUserManga
      parameters:
      - name: username
        in: path
        description: Target username.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
  /mangas/{username}/{id}:
    get:
      tags:
      - Mangas
      summary: Get information on a specific user's managa by its ID.
      description: Route for retrivng the a specific manga. For the admin to use these
        routes, the target username should still be used.
      operationId: getManga
      parameters:
      - name: username
        in: path
        description: Target username.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Target manga id.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manga'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
    put:
      tags:
      - Mangas
      summary: Updates any and all manga fields by manga id.
      description: This route allows to update the whole object or part of it.  If
        you want to update specific fields,  then just add the fields you want to
        update only.
      operationId: putManga
      parameters:
      - name: username
        in: path
        description: Target username.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Target manga id.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - varies
              properties:
                varies:
                  type: string
                  description: The field can vary depending on what you want to update.
                    use any or all the fields of the `MangaObj`
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manga'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
    delete:
      tags:
      - Mangas
      summary: Deletes target manga by id.
      description: Deleters the target manga for the specified username. It can also
        be used by the admin.
      operationId: delManga
      parameters:
      - name: username
        in: path
        description: Target username.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Target manga id.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
  /mangas/{username}/title/{id}:
    get:
      tags:
      - Mangas
      summary: Get information on a specific user's managa by its title or id.
      description: Route for retrivng the a specific manga. For the admin to use these
        routes, the target username should still be used.
      operationId: getMangabyTitle
      parameters:
      - name: username
        in: path
        description: Target username.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Target manga id or title.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manga'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
    put:
      tags:
      - Mangas
      summary: Updates any and all manga fields by Manga title.
      description: This route allows to update the whole object or part of it.  If
        you want to update specific fields,  then just add the fields you want to
        update only.
      operationId: putMangabyTitle
      parameters:
      - name: username
        in: path
        description: Target username.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Target manga id or title.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - varies
              properties:
                varies:
                  type: string
                  description: The field can vary depending on what you want to update.
                    use any or all the fields of the `MangaObj`
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manga'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
    delete:
      tags:
      - Mangas
      summary: Deletes target manga by title.
      description: Deleters the target manga for the specified username. It can also
        be used by the admin.
      operationId: delMangabyTitle
      parameters:
      - name: username
        in: path
        description: Target username.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Target manga id or title.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
  /users:
    get:
      tags:
      - Users
      - Administrators
      summary: Get a list of all the users in the database.
      description: The route provides an array of user objects containing the details
        of the users.  However, passwords are always encrypted so admin can't read
        them.
      operationId: getUsers
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
    post:
      tags:
      - Mangas
      summary: Creates new user.
      description: The route creates new regular users.  The only way to create an
        admin account is to specify the username in the server.
      operationId: postUsers
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - email
              - firstname
              - lastname
              - password
              - username
              properties:
                username:
                  type: string
                  description: Target username.
                password:
                  type: string
                  description: Password.
                  format: password
                email:
                  type: string
                  description: User's email.
                firstname:
                  type: string
                  description: First name.
                lastname:
                  type: string
                  description: Last name.
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - Users
      - Administrators
      summary: Deletes all users but the admin.
      description: This route is for the administrator only.  It allows the deleting
        of all users except the admin account.
      operationId: delUsers
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
  /users/{username}:
    get:
      tags:
      - Users
      summary: Get specified user's data.
      description: Route to retrieve user's information.
      operationId: getUser
      parameters:
      - name: username
        in: path
        description: Target username.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
    put:
      tags:
      - Users
      summary: Updates user's information.
      description: This route allows to update the whole object or part of it.  If
        you want to update specific fields, then just add the fields you want to update
        only.
      operationId: putUser
      parameters:
      - name: username
        in: path
        description: Target username.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - varies
              properties:
                varies:
                  type: string
                  description: The field can vary depending on what you want to update.
                    use any or all the fields of the `UserObj`
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
    delete:
      tags:
      - Users
      - Administrators
      summary: Deletes target user.
      description: This route deletes the target user. However, it does not deletes
        its mangas.  So further action should be taken via `/mangas/{username`.
      operationId: delUser
      parameters:
      - name: username
        in: path
        description: Target username.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - api_key: []
components:
  schemas:
    UserObj:
      required:
      - email
      - firstname
      - lastname
      - password
      - username
      type: object
      properties:
        username:
          type: string
          description: The username has to be unique.
        password:
          type: string
          description: There are no limitations.
          format: password
        email:
          type: string
          description: There are no limitations.
        firstname:
          type: string
          description: Only letters are allowed.
        lastname:
          type: string
          description: Only letters are allowed.
        __v:
          type: integer
          description: This is generated by Mongodb
          format: int32
        _id:
          type: string
          description: This is generated by Mongodb
    MangaObj:
      required:
      - author
      - categories
      - chapter
      - direction
      - plot
      - seriesStatus
      - thumbnail
      - title
      - type
      - url
      - userStatus
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        url:
          type: string
        userStatus:
          type: string
          description: It must be either of 'reading', 'finished' or 'will read'.
        type:
          type: string
        categories:
          type: array
          description: It will be a string that will be turned into an array separated
            by commas.
          items:
            type: string
        chapter:
          type: integer
          format: int32
        seriesStatus:
          type: string
          description: It must be either of 'ongoing' or 'completed'.
        plot:
          type: string
        altName:
          type: array
          description: It will be a string that will be turned into an array separated
            by commas.
          items:
            type: string
        direction:
          type: string
          description: It must be either of 'left to right' or 'right to left'.
        userId:
          type: string
          description: This is obtained internally.
        username:
          type: string
          description: This is obtained internally.
        thumbnail:
          type: string
        __v:
          type: integer
          description: This is generated by Mongodb
          format: int32
        _id:
          type: string
          description: This is generated by Mongodb
      description: Manga Object.
    DeleteObj:
      type: object
      properties:
        n:
          type: integer
          format: int32
        ok:
          type: boolean
          description: 1 for true and 0 for false.
          format: number
    MangasArr:
      type: array
      description: An array of manga objects.
      items:
        $ref: '#/components/schemas/MangaObj'
    UsersArr:
      type: array
      description: An array of user objects.
      items:
        $ref: '#/components/schemas/UserObj'
    Error:
      type: object
      properties:
        success:
          type: boolean
          description: True or false depending of the code.
        message:
          type: string
          description: Message reporting action status.
        data:
          type: object
          properties: {}
          description: It is actually null.
    Success:
      type: object
      properties:
        success:
          type: boolean
          description: True or false depending of the code.
        message:
          type: string
          description: Message reporting action status.
        data:
          type: object
          properties: {}
          description: This will be null.
    Auth:
      type: object
      properties:
        success:
          type: boolean
          description: True or false depending of the code.
        message:
          type: string
          description: Message reporting action status.
        data:
          type: string
          description: It will be either null or the data.
    User:
      type: object
      properties:
        success:
          type: boolean
          description: True or false depending of the code.
        message:
          type: string
          description: Message reporting action status.
        data:
          $ref: '#/components/schemas/UserObj'
    Users:
      type: object
      properties:
        success:
          type: boolean
          description: True or false depending of the code.
        message:
          type: string
          description: Message reporting action status.
        data:
          $ref: '#/components/schemas/UsersArr'
    Manga:
      type: object
      properties:
        success:
          type: boolean
          description: True or false depending of the code.
        message:
          type: string
          description: Message reporting action status.
        data:
          $ref: '#/components/schemas/MangaObj'
    Mangas:
      type: object
      properties:
        success:
          type: boolean
          description: True or false depending of the code.
        message:
          type: string
          description: Message reporting action status.
        data:
          $ref: '#/components/schemas/MangasArr'
    Deleted:
      type: object
      properties:
        success:
          type: boolean
          description: True or false depending of the code.
        message:
          type: string
          description: Message reporting action status.
        data:
          $ref: '#/components/schemas/DeleteObj'
  securitySchemes:
    api_key:
      type: apiKey
      description: This is actually a JSON Web Token (JWT) and it is required for
        all secured routes. There is an admin and regular users.
      name: x-access-token
      in: header
